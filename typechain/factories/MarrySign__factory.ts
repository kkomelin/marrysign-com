/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MarrySign, MarrySignInterface } from "../MarrySign";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "BobNotSpecified",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerIsNotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyContent",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAgreementId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "MustPayExactTerminationCost",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroTerminationCost",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AgreementAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AgreementCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AgreementRefused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AgreementTerminated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "acceptedAt",
        type: "uint256",
      },
    ],
    name: "acceptAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bob",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "content",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "terminationCost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
    ],
    name: "createAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getAgreement",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "alice",
            type: "address",
          },
          {
            internalType: "address",
            name: "bob",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "content",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "terminationCost",
            type: "uint256",
          },
          {
            internalType: "enum MarrySign.AgreementState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct MarrySign.Agreement",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAgreementCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAgreements",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "alice",
            type: "address",
          },
          {
            internalType: "address",
            name: "bob",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "content",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "terminationCost",
            type: "uint256",
          },
          {
            internalType: "enum MarrySign.AgreementState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct MarrySign.Agreement[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "refusedAt",
        type: "uint256",
      },
    ],
    name: "refuseAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "terminateAgreement",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d94806100536000396000f3fe6080604052600436106100795760003560e01c80637c855d3c1161004e5780637c855d3c146101265780639a0269241461014f578063c9d51dd01461016b578063cf7e92421461019457610079565b8062176ed71461007e5780628bed3e146100a75780633ccfd60b146100d25780634f9f6fe6146100e9575b600080fd5b34801561008a57600080fd5b506100a560048036038101906100a09190611362565b6101bf565b005b3480156100b357600080fd5b506100bc61035b565b6040516100c991906113b1565b60405180910390f35b3480156100de57600080fd5b506100e7610368565b005b3480156100f557600080fd5b50610110600480360381019061010b91906113cc565b610456565b60405161011d91906115d9565b60405180910390f35b34801561013257600080fd5b5061014d60048036038101906101489190611362565b61065f565b005b610169600480360381019061016491906113cc565b61087b565b005b34801561017757600080fd5b50610192600480360381019061018d919061175c565b610da9565b005b3480156101a057600080fd5b506101a961105b565b6040516101b6919061192a565b60405180910390f35b6101c761035b565b82106101ff576040517f6bb2419e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182815481106102135761021261194c565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a9576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018083815481106102be576102bd61194c565b5b906000526020600020906006020160040160006101000a81548160ff021916908360038111156102f1576102f06114d9565b5b0217905550806001838154811061030b5761030a61194c565b5b9060005260206000209060060201600501819055507fe2143037af5c22b6c0cd4e6e32f4ebf9e45a47c761e704d3d5e45e0c656b13a48260405161034f91906113b1565b60405180910390a15050565b6000600180549050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ed576040517f6db2465f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610453573d6000803e3d6000fd5b50565b61045e611247565b61046661035b565b821061049e576040517f6bb2419e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182815481106104b2576104b161194c565b5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610587906119aa565b80601f01602080910402602001604051908101604052809291908181526020018280546105b3906119aa565b80156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff166003811115610638576106376114d9565b5b600381111561064a576106496114d9565b5b81526020016005820154815250509050919050565b61066761035b565b821061069f576040517f6bb2419e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600183815481106106ca576106c961194c565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561079157503373ffffffffffffffffffffffffffffffffffffffff16600183815481106107465761074561194c565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156107c8576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600183815481106107de576107dd61194c565b5b906000526020600020906006020160040160006101000a81548160ff02191690836003811115610811576108106114d9565b5b0217905550806001838154811061082b5761082a61194c565b5b9060005260206000209060060201600501819055507fb8109a0b81afab35d75ebc581e5d538fa91872a85354c28d2c84e4bdcfb63ab38260405161086f91906113b1565b60405180910390a15050565b61088361035b565b81106108bb576040517f6bb2419e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600182815481106108e6576108e561194c565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156109ad57503373ffffffffffffffffffffffffffffffffffffffff16600182815481106109625761096161194c565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156109e4576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181815481106109f8576109f761194c565b5b9060005260206000209060060201600301543414610a42576040517f9602d60700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006064600a60ff1634610a569190611a0a565b610a609190611a7b565b905060008114610ad25760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ad0573d6000803e3d6000fd5b505b60008134610ae09190611aac565b90503373ffffffffffffffffffffffffffffffffffffffff1660018481548110610b0d57610b0c61194c565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610beb5760018381548110610b6e57610b6d61194c565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610be5573d6000803e3d6000fd5b50610c78565b60018381548110610bff57610bfe61194c565b5b906000526020600020906006020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c76573d6000803e3d6000fd5b505b60018381548110610c8c57610c8b61194c565b5b9060005260206000209060060201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610cf991906112bb565b60038201600090556004820160006101000a81549060ff021916905560058201600090555050600360018481548110610d3557610d3461194c565b5b906000526020600020906006020160040160006101000a81548160ff02191690836003811115610d6857610d676114d9565b5b02179055507ff9fa90295ce96d59953324ed394a72b2cc720230958f611004a030e5f081d59183604051610d9c91906113b1565b60405180910390a1505050565b6000835103610de4576040517f68b3703600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e4a576040517fd62e497b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008203610e84576040517ff6d5173800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200160006003811115610ee957610ee86114d9565b5b8152602001838152509050600181908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081610fc39190611c8c565b506060820151816003015560808201518160040160006101000a81548160ff02191690836003811115610ff957610ff86114d9565b5b021790555060a0820151816005015550507ff274198eb9b32eaaabc5696e6d9b096304df666d0d3dbbf19bce40387f83df05600161103561035b565b61103f9190611aac565b60405161104c91906113b1565b60405180910390a15050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561123e57838290600052602060002090600602016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461115e906119aa565b80601f016020809104026020016040519081016040528092919081815260200182805461118a906119aa565b80156111d75780601f106111ac576101008083540402835291602001916111d7565b820191906000526020600020905b8154815290600101906020018083116111ba57829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff16600381111561120f5761120e6114d9565b5b6003811115611221576112206114d9565b5b81526020016005820154815250508152602001906001019061107f565b50505050905090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600060038111156112ae576112ad6114d9565b5b8152602001600081525090565b5080546112c7906119aa565b6000825580601f106112d957506112f8565b601f0160209004906000526020600020908101906112f791906112fb565b5b50565b5b808211156113145760008160009055506001016112fc565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61133f8161132c565b811461134a57600080fd5b50565b60008135905061135c81611336565b92915050565b6000806040838503121561137957611378611322565b5b60006113878582860161134d565b92505060206113988582860161134d565b9150509250929050565b6113ab8161132c565b82525050565b60006020820190506113c660008301846113a2565b92915050565b6000602082840312156113e2576113e1611322565b5b60006113f08482850161134d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611424826113f9565b9050919050565b61143481611419565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611474578082015181840152602081019050611459565b60008484015250505050565b6000601f19601f8301169050919050565b600061149c8261143a565b6114a68185611445565b93506114b6818560208601611456565b6114bf81611480565b840191505092915050565b6114d38161132c565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611519576115186114d9565b5b50565b600081905061152a82611508565b919050565b600061153a8261151c565b9050919050565b61154a8161152f565b82525050565b600060c083016000830151611568600086018261142b565b50602083015161157b602086018261142b565b50604083015184820360408601526115938282611491565b91505060608301516115a860608601826114ca565b5060808301516115bb6080860182611541565b5060a08301516115ce60a08601826114ca565b508091505092915050565b600060208201905081810360008301526115f38184611550565b905092915050565b61160481611419565b811461160f57600080fd5b50565b600081359050611621816115fb565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61166982611480565b810181811067ffffffffffffffff8211171561168857611687611631565b5b80604052505050565b600061169b611318565b90506116a78282611660565b919050565b600067ffffffffffffffff8211156116c7576116c6611631565b5b6116d082611480565b9050602081019050919050565b82818337600083830152505050565b60006116ff6116fa846116ac565b611691565b90508281526020810184848401111561171b5761171a61162c565b5b6117268482856116dd565b509392505050565b600082601f83011261174357611742611627565b5b81356117538482602086016116ec565b91505092915050565b6000806000806080858703121561177657611775611322565b5b600061178487828801611612565b945050602085013567ffffffffffffffff8111156117a5576117a4611327565b5b6117b18782880161172e565b93505060406117c28782880161134d565b92505060606117d38782880161134d565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c083016000830151611823600086018261142b565b506020830151611836602086018261142b565b506040830151848203604086015261184e8282611491565b915050606083015161186360608601826114ca565b5060808301516118766080860182611541565b5060a083015161188960a08601826114ca565b508091505092915050565b60006118a0838361180b565b905092915050565b6000602082019050919050565b60006118c0826117df565b6118ca81856117ea565b9350836020820285016118dc856117fb565b8060005b8581101561191857848403895281516118f98582611894565b9450611904836118a8565b925060208a019950506001810190506118e0565b50829750879550505050505092915050565b6000602082019050818103600083015261194481846118b5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119c257607f821691505b6020821081036119d5576119d461197b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a158261132c565b9150611a208361132c565b9250828202611a2e8161132c565b91508282048414831517611a4557611a446119db565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a868261132c565b9150611a918361132c565b925082611aa157611aa0611a4c565b5b828204905092915050565b6000611ab78261132c565b9150611ac28361132c565b9250828203905081811115611ada57611ad96119db565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611b427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611b05565b611b4c8683611b05565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611b89611b84611b7f8461132c565b611b64565b61132c565b9050919050565b6000819050919050565b611ba383611b6e565b611bb7611baf82611b90565b848454611b12565b825550505050565b600090565b611bcc611bbf565b611bd7818484611b9a565b505050565b5b81811015611bfb57611bf0600082611bc4565b600181019050611bdd565b5050565b601f821115611c4057611c1181611ae0565b611c1a84611af5565b81016020851015611c29578190505b611c3d611c3585611af5565b830182611bdc565b50505b505050565b600082821c905092915050565b6000611c6360001984600802611c45565b1980831691505092915050565b6000611c7c8383611c52565b9150826002028217905092915050565b611c958261143a565b67ffffffffffffffff811115611cae57611cad611631565b5b611cb882546119aa565b611cc3828285611bff565b600060209050601f831160018114611cf65760008415611ce4578287015190505b611cee8582611c70565b865550611d56565b601f198416611d0486611ae0565b60005b82811015611d2c57848901518255600182019150602085019450602081019050611d07565b86831015611d495784890151611d45601f891682611c52565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220ef0a7be7c55e31c605a6953480d77d0be26304ecb451b943adde05243063293564736f6c63430008110033";

type MarrySignConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarrySignConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarrySign__factory extends ContractFactory {
  constructor(...args: MarrySignConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<MarrySign> {
    return super.deploy(overrides || {}) as Promise<MarrySign>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MarrySign {
    return super.attach(address) as MarrySign;
  }
  override connect(signer: Signer): MarrySign__factory {
    return super.connect(signer) as MarrySign__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarrySignInterface {
    return new utils.Interface(_abi) as MarrySignInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarrySign {
    return new Contract(address, _abi, signerOrProvider) as MarrySign;
  }
}
