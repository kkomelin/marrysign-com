/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MarrySign {
  export type AgreementStruct = {
    alice: PromiseOrValue<string>;
    bob: PromiseOrValue<string>;
    content: PromiseOrValue<BytesLike>;
    terminationCost: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type AgreementStructOutput = [
    string,
    string,
    string,
    BigNumber,
    number,
    BigNumber
  ] & {
    alice: string;
    bob: string;
    content: string;
    terminationCost: BigNumber;
    state: number;
    updatedAt: BigNumber;
  };
}

export interface MarrySignInterface extends utils.Interface {
  functions: {
    "acceptAgreement(uint256,uint256)": FunctionFragment;
    "createAgreement(address,bytes,uint256,uint256)": FunctionFragment;
    "getAgreement(uint256)": FunctionFragment;
    "getAgreementCount()": FunctionFragment;
    "getAgreements()": FunctionFragment;
    "refuseAgreement(uint256,uint256)": FunctionFragment;
    "terminateAgreement(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptAgreement"
      | "createAgreement"
      | "getAgreement"
      | "getAgreementCount"
      | "getAgreements"
      | "refuseAgreement"
      | "terminateAgreement"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAgreement",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refuseAgreement",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refuseAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AgreementAccepted(uint256)": EventFragment;
    "AgreementCreated(uint256)": EventFragment;
    "AgreementRefused(uint256)": EventFragment;
    "AgreementTerminated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementRefused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementTerminated"): EventFragment;
}

export interface AgreementAcceptedEventObject {
  index: BigNumber;
}
export type AgreementAcceptedEvent = TypedEvent<
  [BigNumber],
  AgreementAcceptedEventObject
>;

export type AgreementAcceptedEventFilter =
  TypedEventFilter<AgreementAcceptedEvent>;

export interface AgreementCreatedEventObject {
  index: BigNumber;
}
export type AgreementCreatedEvent = TypedEvent<
  [BigNumber],
  AgreementCreatedEventObject
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export interface AgreementRefusedEventObject {
  index: BigNumber;
}
export type AgreementRefusedEvent = TypedEvent<
  [BigNumber],
  AgreementRefusedEventObject
>;

export type AgreementRefusedEventFilter =
  TypedEventFilter<AgreementRefusedEvent>;

export interface AgreementTerminatedEventObject {
  index: BigNumber;
}
export type AgreementTerminatedEvent = TypedEvent<
  [BigNumber],
  AgreementTerminatedEventObject
>;

export type AgreementTerminatedEventFilter =
  TypedEventFilter<AgreementTerminatedEvent>;

export interface MarrySign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarrySignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAgreement(
      index: PromiseOrValue<BigNumberish>,
      acceptedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAgreement(
      bob: PromiseOrValue<string>,
      content: PromiseOrValue<BytesLike>,
      terminationCost: PromiseOrValue<BigNumberish>,
      createdAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarrySign.AgreementStructOutput]>;

    getAgreementCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAgreements(
      overrides?: CallOverrides
    ): Promise<[MarrySign.AgreementStructOutput[]]>;

    refuseAgreement(
      index: PromiseOrValue<BigNumberish>,
      refusedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    terminateAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptAgreement(
    index: PromiseOrValue<BigNumberish>,
    acceptedAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAgreement(
    bob: PromiseOrValue<string>,
    content: PromiseOrValue<BytesLike>,
    terminationCost: PromiseOrValue<BigNumberish>,
    createdAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAgreement(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarrySign.AgreementStructOutput>;

  getAgreementCount(overrides?: CallOverrides): Promise<BigNumber>;

  getAgreements(
    overrides?: CallOverrides
  ): Promise<MarrySign.AgreementStructOutput[]>;

  refuseAgreement(
    index: PromiseOrValue<BigNumberish>,
    refusedAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  terminateAgreement(
    index: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAgreement(
      index: PromiseOrValue<BigNumberish>,
      acceptedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAgreement(
      bob: PromiseOrValue<string>,
      content: PromiseOrValue<BytesLike>,
      terminationCost: PromiseOrValue<BigNumberish>,
      createdAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarrySign.AgreementStructOutput>;

    getAgreementCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAgreements(
      overrides?: CallOverrides
    ): Promise<MarrySign.AgreementStructOutput[]>;

    refuseAgreement(
      index: PromiseOrValue<BigNumberish>,
      refusedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    terminateAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AgreementAccepted(uint256)"(index?: null): AgreementAcceptedEventFilter;
    AgreementAccepted(index?: null): AgreementAcceptedEventFilter;

    "AgreementCreated(uint256)"(index?: null): AgreementCreatedEventFilter;
    AgreementCreated(index?: null): AgreementCreatedEventFilter;

    "AgreementRefused(uint256)"(index?: null): AgreementRefusedEventFilter;
    AgreementRefused(index?: null): AgreementRefusedEventFilter;

    "AgreementTerminated(uint256)"(
      index?: null
    ): AgreementTerminatedEventFilter;
    AgreementTerminated(index?: null): AgreementTerminatedEventFilter;
  };

  estimateGas: {
    acceptAgreement(
      index: PromiseOrValue<BigNumberish>,
      acceptedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAgreement(
      bob: PromiseOrValue<string>,
      content: PromiseOrValue<BytesLike>,
      terminationCost: PromiseOrValue<BigNumberish>,
      createdAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAgreements(overrides?: CallOverrides): Promise<BigNumber>;

    refuseAgreement(
      index: PromiseOrValue<BigNumberish>,
      refusedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    terminateAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAgreement(
      index: PromiseOrValue<BigNumberish>,
      acceptedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAgreement(
      bob: PromiseOrValue<string>,
      content: PromiseOrValue<BytesLike>,
      terminationCost: PromiseOrValue<BigNumberish>,
      createdAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAgreements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refuseAgreement(
      index: PromiseOrValue<BigNumberish>,
      refusedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    terminateAgreement(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
